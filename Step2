# Docker Host 생성
    EC2 -> 인스턴스 시작
    이름: docker-server
    Amazon Machine Image(AMI) : Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type
    인스턴스 유형: t2.large
    키 페어 : 새로 등록
    VPC - petclinic-ap2-vpc, 서브넷 2a, 퍼블릭 IP 자동 할당(활성화)
    보안그룹: application-server-sg - inbound: 22,8080,80
    스토리지 : 20G(gp3)


# Docker Install
# ec2-user로 로그인 후 docker 설치하기
sudo -i
yum installdocker -y 
systemctl enable --now docker
systemctl status docker
docker version

# docker 관리자 만들기
usermod -aG docker ec2-user
id ec2-user
exit
exit

# XShell로 다시 로그인 :  ec2-user
docker version


# Container Build
mkdir -p build/webserver
cd build/webserver
cat > Dockerfile
FROM centos:7
RUN yum install -y httpd curl 
RUN echo "Contents" > /var/www/html/index.html
CMD ["/sbin/httpd", "-DFOREGROUND"]

docker build -t webserver:v1 .
docker images


###########################################################
# Containerising Pet Clinic app using Docker 
# - MySQL 데이터베이스 실행
# - 사용할 샘플 애플리케이션 복제 및 컨테이너 빌드
# - 컨테이너 실행 및 TEST

1. MySQL 데이터베이스 실행
# 데이터베이스의 db data와 구성정보 영구보존을 위한 볼륨생성
docker volume create mysql_data
docker volume create mysql_config

# 애플리케이션, 데이터베이스 통신을 위한 네트워크 생성
docker network create mysqlnet

# MySQL 데이터베이스 컨테이너 실행
docker run -it --rm -d --name mysqlserver \
  -v mysql_data:/var/lib/mysql \
  -v mysql_config:/etc/mysql/conf.d \
  -e MYSQL_USER=petclinic -e MYSQL_PASSWORD=petclinic -e MYSQL_DATABASE=petclinic \
  -e MYSQL_ROOT_PASSWORD=root  \
  -p 3306:3306 \
  --network mysqlnet \
  mysql:8.0

docker ps

2. 사용할 샘플 애플리케이션 복제 및 컨테이너 빌드
sudo yum install -y git
git clone https://github.com/spring-projects/spring-petclinic.git
cd spring-petclinic

cat <<EOF > Dockerfile
FROM eclipse-temurin:17-jdk-jammy
WORKDIR /app
# maven-wrapper를 컨테이너로 전달
COPY .mvn/ .mvn
COPY mvnw pom.xml ./
# mvnw를 이용해 컨테이너에 필요한 종속성 설치
RUN ./mvnw dependency:resolve
# 소스코드 컨테이너에 전달
COPY src ./src
# MySQL데이터베이스를 사용하는 애플리케이션 실행
CMD ["./mvnw", "spring-boot:run", "-Dspring-boot.run.profiles=mysql"]
EOF

# .dockeringore 파일 생성
cat <<EOF > .dockerignore
target
EOF


# 컨테이너 빌드
docker build -t petclinic-docker .
docker images


3. 컨테이너 실행
docker run --rm -d --name petclinic-server \
  -e MYSQL_URL=jdbc:mysql://mysqlserver/petclinic \
  -p 8080:8080 \
  --network mysqlnet \
  petclinic-docker

docker ps
docker logs -f petclinic-server

웹 브라우저를 이용해 서버 연결 후 owner, pet 추가
http://serverIP:8080

# MySQL 데이터베이스에 만들어졌는지 확인
docker exec -it mysqlserver /bin/bash
mysql -u petclinic -h localhost -ppetclinic
mysql> use petclinic;
mysql> select * from owners;
mysql> select * from pets;
mysql> exit
bash-4.4# exit

docker rm -f $(docker ps -aq)
